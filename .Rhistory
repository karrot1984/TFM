install.packages("shiny")
shiny::runApp()
runApp()
runApp()
install.packages("shinydashboard")
runApp()
install.packages("shinydashboard")
runApp()
Error in library: there is no package called ‘shinydashboard’Error in library: there is no package called ‘shinydashboard’Error in library: there is no package called ‘shinydashboard’
install.packages("shinydashboard")
install.packages("shinydashboard")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinythemes")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("ggplot2")
install.packages("ggplot2")
runApp()
install.packages("readr")
runApp()
runApp()
runApp()
runApp()
install.packages(c("dplyr", "plotly"))
library(shiny)
library(datasets)
library(plotly)
library(dplyr)
ui <- shinyUI(fluidPage(
titlePanel("Visualisierung von Daten"),
tabsetPanel(
tabPanel("Upload File",
titlePanel("Uploading Files"),
sidebarLayout(
sidebarPanel(
fileInput('file1', 'W\u00e4hle eine CSV Datei aus',
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
# added interface for uploading data from
# http://shiny.rstudio.com/gallery/file-upload.html
tags$br(),
checkboxInput('header', 'Kopfzeile', TRUE),
selectInput('xcol', 'Spalte:', ""),
selectInput('ycol', 'Gruppierungsvariable ausw\u00e4hlen (bsp: Alter, Geschlecht,...)', "", selected = ""),
selectInput("plot.type","Plot Typ:",
list(bar = "bar", boxplot = "boxplot")#, histogram = "histogram", density = "density")
),
radioButtons('sep', 'Trennzeichen',
c(Semicolon=';',
Comma=',',
Tab='\t'),
';'),
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'"')
),
mainPanel(
plotlyOutput('MyPlot')#,
# tableOutput('contents')
)
)
)
)
)
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("wordcloud", "RColorBrewer", "DT", "shinydashboard", "ggplot2"))
df <- read.csv(C:\Users\karro\Documents\MASTER\TFG\issues_limpia3.csv)
for(i in seq_along(df)){
df[,i] <- as.factor(df[,i])
}
df <- read.csv(C:\Users\karro\Documents\MASTER\TFG\issues_limpia3.csv)
df <- read.csv("C:\Users\karro\Documents\MASTER\TFG\issues_limpia3.csv")
pwd
pwd()
df <- read.csv('C:\Users\karro\Documents\MASTER\TFG\issues_limpia3.csv')
df <- read.csv("C:/Users/karro/Documents/MASTER/TFG/issues_limpia3.csv")
df
df <- read.csv("C:/Users/karro/Documents/MASTER/TFG/issues_limpia4.csv")
df
df[3]
df[10,3]
df[2,3]
df[1,1]
df[1,2]
df[2,1]
df[0,1]
names(df)
df <- read.csv("C:/Users/karro/Documents/MASTER/TFG/issues_limpia4.csv")
names(df)
names(df)[c(1,1)]
names(df)[c(1,2)]
names(df)[c(1)]
names(df)[c(2)]
names(df)[2]
names(df)[1]
df
view(df)
View(df)
df2 <- data.frame(df)
df2
View(df2)
head(df, 1)
head(df, 2)
table(df$Tracker)
table(df$Status)
df3 <- read.csv("C:/Users/karro/Documents/MASTER/TFG/issues_limpia4.csv", TRUE,';',
'"')
df3 <- read.csv("C:/Users/karro/Documents/MASTER/TFG/issues_limpia4.csv", TRUE,';','"')
df3
View(df3)
names(df3)[1]
names(df3)[2]
df[0,1]
df[1,1]
df3[1,1]
df3[2,1]
df3[2,3]
df3[2,2]
df3[0,0]
df3[1,1]
df3[1,2]
df3[2,1]
df3[3,1]
df3[3,3]
df3[2,2]
plot(df3)
names(df3)[9]
names(df3)[2]
ycol
xcol <- names(df3)[9]
ycol <- names(df3)[2]
xcol
ggplot(data(),aes(x=as.factor(data()[,xcol]),fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
library(ggplot2)
install.packages("colorspace")
install.packages("colorspace")
ggplot(data(),aes(x=as.factor(data()[,xcol]),fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
install.packages("ggplot2")
library(ggplot2)
install.packages("colorspace")
ggplot(data(),aes(x=as.factor(data()[,xcol]),fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
install.packages("ggplot2",dependencies=TRUE)
ggplot(data(),aes(x=as.factor(data()[,xcol]),fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
mla <- ggplot(data(),aes(x=as.factor(data()[,xcol]),fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
mla <- ggplot(data(),aes(x=as.factor(data()[,xcol]),
fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+
coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
install.packages("magrittr") # package installations are only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
install.packages("dplyr")
mla <- ggplot(data(),aes(x=as.factor(data()[,xcol]),
fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+
coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
library(magrittr) # needs to be run every time you start R and want to use %>%
mla <- ggplot(data(),aes(x=as.factor(data()[,xcol]),
fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+
coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
mla <- ggplot(data(),aes(x=as.factor(data()[,xcol]),
fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+
coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
library(plotly)
install.packages("plotly",dependencies=TRUE)
mla <- ggplot(data(),aes(x=as.factor(data()[,xcol]),
fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+
coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
mla <- ggplot(data(),aes(x=as.factor(data()[,xcol]),
fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+
coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
library(ggplot2)
mla <- ggplot(data(),aes(x=as.factor(data()[,xcol]),
fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+
coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
library(shiny)
library(datasets)
library(plotly)
library(dplyr)
library(ggplot2)
mla <- ggplot(data(),aes(x=as.factor(data()[,xcol]),
fill=as.factor(data()[,ycol]),group = as.factor(data()[,ycol])))+
coord_flip()+
geom_bar(aes(y=..prop..*100),position=position_dodge())+
ggtitle("Porcentaje por grupo")+
xlab(xcol)+ylab("Porcentaje") +scale_fill_discrete(name=ycol)
ggplotly(p) %>% layout(autosize=TRUE) %>% style(hoverinfo = "none")
ggplot(genero, aes(x = SEXO)) + geom_bar()
ggplot(data=iris,aes(Sepal.Length, Petal.Length)) +geom_point() +stat_smooth()
library(ggplot2)
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE, repos = "http://cran.us.r-project.org")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
